CREATE TABLE cov(
        iso_code VARCHAR,
        continent VARCHAR,
        location VARCHAR,
        date DATE,
        population NUMERIC,
        total_cases NUMERIC,
        new_cases NUMERIC,
        new_cases_smoothed NUMERIC,
        total_deaths NUMERIC,
        new_deaths NUMERIC,
        new_deaths_smoothed NUMERIC,
        total_cases_per_million NUMERIC,
        new_cases_per_million NUMERIC,
        new_cases_smoothed_per_million NUMERIC,
        total_deaths_per_million NUMERIC,
        new_deaths_per_million NUMERIC,
        new_deaths_smoothed_per_million NUMERIC,
        reproduction_rate NUMERIC,
        icu_patients NUMERIC,
        icu_patients_per_million NUMERIC,
        hosp_patients NUMERIC,
        hosp_patients_per_million NUMERIC,
        weekly_icu_admissions NUMERIC,
        weekly_icu_admissions_per_million NUMERIC,
        weekly_hosp_admissions NUMERIC,
        weekly_hosp_admissions_per_million NUMERIC,
        new_tests NUMERIC,
        total_tests NUMERIC,
        total_tests_per_thousand NUMERIC,
        new_tests_per_thousand NUMERIC,
        new_tests_smoothed NUMERIC,
        new_tests_smoothed_per_thousand NUMERIC,
        positive_rate NUMERIC,
        tests_per_case NUMERIC
);





CREATE TABLE vax(
        iso_code VARCHAR,
        continent VARCHAR,
        location VARCHAR,
        date DATE,
        population NUMERIC,
        total_vaccinations NUMERIC,
        people_vaccinated NUMERIC,
        people_fully_vaccinated NUMERIC,
        total_boosters NUMERIC,
        new_vaccinations NUMERIC,
        new_vaccinations_smoothed NUMERIC,
        total_vaccinations_per_hundred NUMERIC,
        people_vaccinated_per_hundred NUMERIC,
        people_fully_vaccinated_per_hundred NUMERIC,
        total_boosters_per_hundred NUMERIC,
        new_vaccinations_smoothed_per_million NUMERIC,
        new_people_vaccinated_smoothed NUMERIC,
        new_people_vaccinated_smoothed_per_hundred NUMERIC,
        stringency_index NUMERIC,
        population_density NUMERIC,
        median_age NUMERIC,
        aged_65_older NUMERIC,
        aged_70_older NUMERIC,
        gdp_per_capita NUMERIC,
        extreme_poverty NUMERIC,
        cardiovasc_death_rate NUMERIC,
        diabetes_prevalence NUMERIC,
        female_smokers NUMERIC,
        male_smokers NUMERIC,
        handwashing_facilities NUMERIC,
        hospital_beds_per_thousand NUMERIC,
        life_expectancy NUMERIC,
        human_development_index	 NUMERIC,
        excess_mortality_cumulative_absolute NUMERIC,
        excess_mortality_cumulative NUMERIC,
        excess_mortality NUMERIC,
        excess_mortality_cumulative_per_million NUMERIC

);


SELECT location, date, total_cases, new_cases, total_deaths, population
FROM cov
ORDER BY 1,2;




-- total cases vs total deaths
SELECT location, date, total_cases, total_deaths, (total_deaths/NULLIF(total_cases,0))*100 AS DeathPercentage
FROM cov
WHERE location = 'India'
ORDER BY 2;




-- total cases vs population of whole countries
SELECT location, date, total_cases, population, ROUND((total_cases/population)*100,2) as PopulationPercentageInfect
FROM cov
ORDER BY 1,2;




-- countries with highest infection rate compared to population
SELECT location, population, MAX(total_cases) as HighestInfected, (MAX(total_cases/population))*100 as InfectedPopulationPercentage
FROM cov
GROUP BY location, population
ORDER BY 4 desc;




-- countries with highest death per count
SELECT location, MAX(total_deaths) as total_deaths
FROM cov
GROUP BY location
ORDER BY 2 desc;





-- continent with highest death per count
SELECT continent, date, MAX(total_cases) total_cases, MAX(new_cases)new_cases, MAX(total_deaths)total_deaths
FROM cov
GROUP BY continent,date
ORDER BY 5 desc;




-- global numbers by date
SELECT date, SUM(new_cases) as new_cases_per_day, SUM(new_deaths) as NewDeathsPerDay, SUM(new_deaths)/NULLIF(SUM(new_cases),0)*100 as DeathPercentagePerDay
FROM cov
GROUP BY date
ORDER BY 2 desc;




-- total population vs vaccinations
WITH PopvsVac 
	(
	continent, location, date, population, new_vaccinations, PeopleVaccinatedTillDate
	)  
as 
(  
	SELECT t1.continent, t1.location, t1.date, t1.population, t2.new_vaccinations,   
		SUM(t2.new_vaccinations) OVER(PARTITION BY t1.location ORDER BY t1.location,t1.date) as PeopleVaccinatedTillDate 
	FROM cov t1  
	JOIN vax t2   
		on t1.location = t2.location   and t1.date = t2.date  
)
SELECT *, ROUND((PeopleVaccinatedTillDate/population)*100,2) as people_vaccinated_percent FROM PopvsVac;




-- Temp TABLE
DROP TABLE if exists population_vacc;
CREATE TEMPORARY TABLE population_vacc
(
continent varchar(255),
location varchar(55),
date date,
population double,
new_vaccinations text,
PeopleVaccinatedTillDate double
);

INSERT into population_vacc
SELECT t1.continent, t1.location, t1.date, t1.population, t2.new_vaccinations,
	SUM(t2.new_vaccinations) OVER(PARTITION BY t1.location ORDER BY t1.location,t1.date) as PeopleVaccinatedTillDate
FROM cov t1
JOIN vax t2
	on t1.location = t2.location
	and t1.date = t2.date
;

SELECT *, (PeopleVaccinatedTillDate/Population)*100 FROM population_vacc;



-- creating view to score data for later visualizations
CREATE view population_vacc as 
SELECT t1.continent, t1.location, t1.date, t1.population, t2.new_vaccinations,
	SUM(t2.new_vaccinations) OVER(PARTITION BY t1.location ORDER BY t1.location,t1.date) as PeopleVaccinatedTillDate
FROM cov t1
JOIN vax t2
	on t1.location = t2.location
	and t1.date = t2.date
;

SELECT * FROM population_vacc
where location = 'India';



SELECT location, MAX(population) population, MAX(total_vaccinations) total_vaccinations, MAX(people_vaccinated) people_vaccinated,MAX(people_fully_vaccinated) people_fully_vaccinated,MAX(total_boosters) total_boosters
FROM vax
GROUP BY location
ORDER BY 1,2